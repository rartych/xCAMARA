name: Execute MegaLinter
description: 'A reusable action for linting using configuration from branch indicated by input `ref` variable '

on:
  # For a workflow to be reusable, the values for on must include workflow_call
  workflow_call:
    inputs:
      ref:
        description: 'The branch, tag, or commit to check out'
        type: string
        required: false
        default: 'main'

jobs:
  execute:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
        # If you use VALIDATE_ALL_CODEBASE = true, you can remove this line to
        # improve performance
        # fetch-depth: 0
          
    - name: Checkout linting config
      uses: actions/checkout@v4
      with:
        repository: rartych/xCAMARA
        ref: ${{ inputs.ref }}
        sparse-checkout: |
          # config/linting/lint_function
          # config/linting/.spectral.yml
          config/linting/
        sparse-checkout-cone-mode: false  

      # MegaLinter
      - name: MegaLinter
        id: ml
        # You can override MegaLinter flavor used to have faster performances
        # More info at https://megalinter.io/latest/flavors/
        uses: oxsecurity/megalinter/flavors/c_cpp@v8



        # All available variables are described in documentation
        # https://megalinter.io/latest/configuration/
        env:
          # Validates all source when push on main, else just the git diff with
          # main. Override with true if you always want to lint all sources
          #
          # To validate the entire codebase, set to:
          VALIDATE_ALL_CODEBASE: true
          #
          # To validate only diff with main, set to:
          # VALIDATE_ALL_CODEBASE: >-
          #   ${{
          #     github.event_name == 'push' &&
          #     contains(fromJSON('["refs/heads/main", "refs/heads/master"]'), github.ref)
          #   }}
          # VALIDATE_ALL_CODEBASE: >-
          #  ${{
          #    github.event_name == 'push' &&
          #    contains(fromJSON('["refs/heads/main", "refs/heads/master"]'), github.ref)
          #  }}

          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE
          # .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY
          PRINT_ALPACA: false
          LINTER_RULES_PATH: "https://raw.githubusercontent.com/rartych/xCAMARA/${{ inputs.branch }}"
          # Uncomment to disable copy-paste and spell checks
          DISABLE: COPYPASTE,SPELL,JAVASCRIPT,MARKDOWN
          DISABLE_LINTERS: YAML_PRETTIER,REPOSITORY_GRYPE,REPOSITORY_SEMGREP,REPOSITORY_DEVSKIM,REPOSITORY_KICS,REPOSITORY_TRIVY,REPOSITORY_TRIVY_SBOM,REPOSITORY_TRUFFLEHOG,REPOSITORY_CHECKOV,REPOSITORY_GITLEAKS,YAML_V8R,JAVA_PMD
          # DISABLE_LINTERS: MARKDOWN_MARKDOWNLINT,MARKDOWN_REMARK_LINT,MARKDOWN_MARKDOWN_LINK_CHECK,MARKDOWN_MARKDOWN_TABLE_FORMATTER,SPELL_CSPELL,SPELL_LYCHEE,YAML_PRETTIER,REPOSITORY_GRYPE,REPOSITORY_SEMGREP,REPOSITORY_DEVSKIM,REPOSITORY_KICS,REPOSITORY_TRIVY,REPOSITORY_TRIVY_SBOM,REPOSITORY_TRUFFLEHOG,REPOSITORY_CHECKOV,REPOSITORY_GITLEAKS,YAML_V8R,JAVA_PMD
          API_SPECTRAL_CONFIG_FILE: ".spectral.yaml"
          # API_SPECTRAL_RULES_PATH: "config/linting/"
          YAML_YAMLLINT_CONFIG_FILE: ".yamllint.yaml"
          GHERKIN_GHERKIN_LINT_CONFIG_FILE: ".gherkin-lintrc"
          YAML_YAMLLINT_FILTER_REGEX_INCLUDE: "(code/)"
          API_SPECTRAL_FILTER_REGEX_INCLUDE: "(code/)"
          
      # Upload MegaLinter artifacts
      - name: Archive production artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: MegaLinter reports
          include-hidden-files: "true"
          path: |
            megalinter-reports
            mega-linter.log
